name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set up Node.js for Frontend and Backend
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    # Step 3: Install and Build Frontend
    - name: Install and Build Frontend
      working-directory: ./frontend
      run: |
        npm install
        npm run build

    # Step 4: Install and Test Backend
    - name: Install and Test Backend
      working-directory: ./backend
      run: |
        npm install
        npm test # Run tests (if any)

    # Step 5: Build Docker Images
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Frontend Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./frontend
        docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

    - name: Build and Push Backend Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest ./backend
        docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

  deploy:
    name: Deploy to AWS
    needs: build
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Configure AWS CLI
    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Step 3: Deploy Docker Containers to AWS EC2
    - name: Deploy to AWS EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY }} ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
        docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:latest
        docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest

        docker stop frontend || true && docker rm frontend || true
        docker stop backend || true && docker rm backend || true

        docker run -d -p 80:3000 --name frontend ${{ secrets.DOCKER_USERNAME }}/frontend:latest
        docker run -d -p 5000:5000 --name backend ${{ secrets.DOCKER_USERNAME }}/backend:latest
        EOF
